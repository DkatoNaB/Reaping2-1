cmake_minimum_required(VERSION 2.8 FATAL_ERROR)

project(Reaping2)

set(CMAKE_VERBOSE_MAKEFILE ON)

set( CMAKE_CXX_STANDARD 11 )

# support for YouCompleteMe
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

if( CMAKE_HOST_UNIX )
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-deprecated-declarations" )
    if($ENV{REAPING2_PROFILE})
        set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg" )
    endif($ENV{REAPING2_PROFILE})
endif( CMAKE_HOST_UNIX )

list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake_support)

if(NOT DEFINED REAPING2_DEPS_INSTALL_DIR AND EXISTS ${PROJECT_SOURCE_DIR}/local)
    set(REAPING2_DEPS_INSTALL_DIR ${PROJECT_SOURCE_DIR}/local)
endif()
# Ensure that it's cached and absolute
find_path(REAPING2_DEPS_INSTALL_DIR ${REAPING2_DEPS_INSTALL_DIR}
    HINTS ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR}
    )

list(APPEND CMAKE_FIND_ROOT_PATH ${REAPING2_DEPS_INSTALL_DIR})
set(CMAKE_PREFIX_PATH ${REAPING2_DEPS_INSTALL_DIR})

list( APPEND CMAKE_MODULE_PATH ${REAPING2_DEPS_INSTALL_DIR}/lib/cmake )

include( FindDeps )
include( CMakeHelper )

set(BUILD_SHARED_LIBS ON)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_PDB_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/pdb)
foreach(CONFIG_NAME DEBUG RELEASE RELWITHDEBINFO)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CONFIG_NAME} ${PROJECT_BINARY_DIR}/bin/$<LOWER_CASE:$<CONFIG>>)
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CONFIG_NAME} ${PROJECT_BINARY_DIR}/lib/$<LOWER_CASE:$<CONFIG>>)
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CONFIG_NAME} ${PROJECT_BINARY_DIR}/lib/$<LOWER_CASE:$<CONFIG>>)
    string(TOLOWER ${CONFIG_NAME} config_name_lower)
    set(CMAKE_PDB_OUTPUT_DIRECTORY_${CONFIG_NAME} ${PROJECT_BINARY_DIR}/pdb/${config_name_lower})
endforeach()

if(WIN32)
    set( WIN32_ENET_INCLUDE_WS2_32 ws2_32.lib )
    set( WIN32_ENET_INCLUDE_WINMM winmm.lib )
    if(MINGW)
        set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wa,-mbig-obj" )
    elseif(MSVC)
        set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /bigobj /Oy-" )
        option(ENABLE_MSVC_MP "Enable multi-processor compilation" ON)
        if(ENABLE_MSVC_MP)
            set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP" )
        endif(ENABLE_MSVC_MP)
    endif()
endif(WIN32)

link_directories(${Boost_LIBRARY_DIRS})

# use ccache if available
find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
endif(CCACHE_FOUND)

include_directories(
    "${PROJECT_SOURCE_DIR}/src"
    )

include_directories( SYSTEM
    "${PROJECT_SOURCE_DIR}/deps/json-cpp-0.6.0-rc2"
    "${PROJECT_SOURCE_DIR}/deps/eos_portable_archive/eos"
    "${PROJECT_SOURCE_DIR}/deps/ctpl"
    ${Boost_INCLUDE_DIR}
    ${GLEW_INCLUDE_DIR}
    ${GLFW_INCLUDE_DIR}
    ${GLM_INCLUDE_DIR}
    ${LIBOGG_INCLUDE_DIR}
    ${LIBVORBIS_INCLUDE_DIR}
    ${ZLIB_INCLUDE_DIR}
    ${PNG_INCLUDE_DIR}
    ${PORTAUDIO_INCLUDE_DIR}
    ${PORTAUDIO_CMAKE_INCLUDE_DIR}
    ${WIN32_ENET_INCLUDE_WS2_32}
    ${WIN32_ENET_INCLUDE_WINMM}
    ${ENET_INCLUDE_DIR}
    )

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set_property(GLOBAL PROPERTY PREDEFINED_TARGETS_FOLDER "cmake")

include( VersionHeader )

add_subdirectory( src )
add_subdirectory( tools )
add_subdirectory( run )

